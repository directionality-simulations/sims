str(append(final, param_map$sample_sizes))
final[[1]][[1]]
final[[1]][[7]] <- param_map$sample_sizes
str(final)
final[[1]][['sample_size']] <- param_map$sample_sizes
str(final)
app_ss <- function(val){final[[val]][['sample_size']] <- param_map$sample_sizes[val]}
lapply(final, app_ss)
map(final, app_ss)
# set all of the param_map values
across <- c(1:36)
map(across, app_ss)
final[[val]][['sample_size']] <<- param_map$sample_sizes[val]}
map(across, app_ss)
final[[val]][['sample_size']] <<- param_map$sample_sizes[val]}
app_ss <- function(val){
final[[val]][['sample_size']] <<- param_map$sample_sizes[val]}
map(across, app_ss)
str(final)
app_ss <- function(val){
final[[val]][['sample_size']] <<- rep(param_map$sample_sizes[val], 500}
map(across, app_ss)
str(final)
app_ss <- function(val){
final[[val]][['sample_size']] <<- rep(param_map$sample_sizes[val], 500)}
map(across, app_ss)
str(final)
tryer <- list(
'a' = c(1,2,3,4)
)
tryer$b <- c(rep(1,4))
tryer
mm <- list(
list(
'a' = c(1,2,3,4),
'b' = c(1,2,3,4)
),
list(
'a' = c(4,3,5,2),
'b' = c(3,6,4,3)
)
)
mm
mm[[]][['sample_size']] <- 4
mm[[]]$a
mm[[]][['a']]
mm[[1]][['a']]
mm[['a']]
mm['a']
mm[[]]$a
mm[[1:2]][['a']]
mm[[]]
mm[]
mm[][['a']]
mm[]['a']
mm[]
mm[]$a
lapply(final, `[`, c('a', 'b'))
lapply(final, `[`, 'a')
lapply(mm, `[`, c('a', 'b'))
lapply(mm, `[`, 'a')
lapply(mm, `[`, 'a')[1]
mm[]$a
mm[[]]
mm[]
mm[append(, 4)]
final <- list(k,k,k,k,k,k,k,k,k,k,k,k,k,k,k,k,k,k,k,k,k,k,k,k,k,k,k,k,k,k,k,k,k,k,k,k)
str(final)
# set all of the param_map values
across <- c(1:36)
app_ss <- function(val){
final[[val]][['sample_size']] <<- rep(param_map$sample_sizes[val], 500)}
map(across, app_ss)
str(final)
sims_function_case1 <- function(N, lag_amount){
# 1 #
N <- N
lag_amount <- lag_amount
mu <- c(0,0,0)
sigma <- matrix(c(1.0, 0.5, 0.5,
0.5, 1.0, 0.5,
0.5, 0.5, 1.0), 3, 3, byrow = T)
autor_x <- 0.05
autor_y <- 0.05
autor_z <- 0.05
x_cause_y <- 0.15
y_cause_x <- 0.15
z_cause <- 0.15
time <- 200
# 2 #
sims <- 500
p_wo_partial <- numeric(sims)
se_wo_partial <- numeric(sims)
b1_wo_partial <- numeric(sims)
p_partial <- numeric(sims)
se_partial <- numeric(sims)
b1_partial <- numeric(sims)
# 3 #
for(q in 1:sims){
original_corr_matrix <-  mvrnorm(N, mu, sigma)
df <-  matrix(, ncol = 4, nrow = N*time)
# 4 $
count <- 0
for(i in 1:N){
y_het <- rnorm(1,0,1)
for(j in 1:time){
count <- count + 1
if(j == 1 | j == 2 | j == 3 | j == 4 | j == 5){
df[count,1] <- j
df[count,2] <- i
df[count,3] <- original_corr_matrix[i,1]
df[count,4] <- original_corr_matrix[i,2]
}else{
df[count,1] <- j
df[count,2] <- i
df[count,3] <- autor_x * df[(count - 1), 3] + rnorm(1,0,1)
df[count,4] <- autor_y * df[(count - 1), 4] + x_cause_y * df[count - lag_amount,3] + y_het + rnorm(1,0,1) # lag amount parameter plugged in here
}
}
}
# 5 #
df <- data.frame(df)
names(df) <- c('day','id','action','affect')
df <- df %>%
mutate(lag_affect = lag(affect)) %>%
filter(day > 180)
person_mean_df <- df %>%
group_by(id) %>%
summarise(
action_person_mean = mean(action)
)
df <- left_join(df, person_mean_df)
df$action_person_center <- df$action - df$action_person_mean
# 6 #
model_wo_partial <- lme(fixed = affect ~ action_person_center,
random = ~1|id,
data = df,
control = lmeControl(opt = 'optim')
)
model_partial <- lme(fixed = affect ~ action_person_center + lag_affect,
random = ~1|id,
data = df,
control = lmeControl(opt = 'optim'))
# Without partial model results #
# p-value for b1 #
p_wo_partial[q] <- summary(model_wo_partial)$tTable[, "p-value"][2]
# standard error for b1 #
se_wo_partial[q] <- summary(model_wo_partial)$tTable[, "Std.Error"][2]
# b1 itself #
b1_wo_partial[q] <- summary(model_wo_partial)$tTable[, "Value"][2]
# With partial model results #
# p-value for b1 #
p_partial[q] <- summary(model_partial)$tTable[, "p-value"][2]
# standard error for b1 #
se_partial[q] <- summary(model_partial)$tTable[, "Std.Error"][2]
# b1 itself #
b1_partial[q] <- summary(model_partial)$tTable[, "Value"][2]
} # end the 500 sims loop here
results <- list(
'p_wo_partial' = p_wo_partial,
'se_wo_partial' = se_wo_partial,
'b1_wo_partial' = b1_wo_partial,
'p_partial' = p_partial,
'se_partial' = se_partial,
'b1_partial' = b1_partial,
'sample_size' = N,
'lag_amount' = lag_amount
)
return(results)
}
k <- sims_function_case1(72, 2)
str(k)
sims_function_case1 <- function(N, lag_amount){
# 1 #
N <- N
lag_amount <- lag_amount
mu <- c(0,0,0)
sigma <- matrix(c(1.0, 0.5, 0.5,
0.5, 1.0, 0.5,
0.5, 0.5, 1.0), 3, 3, byrow = T)
autor_x <- 0.05
autor_y <- 0.05
autor_z <- 0.05
x_cause_y <- 0.15
y_cause_x <- 0.15
z_cause <- 0.15
time <- 200
# 2 #
sims <- 500
p_wo_partial <- numeric(sims)
se_wo_partial <- numeric(sims)
b1_wo_partial <- numeric(sims)
p_partial <- numeric(sims)
se_partial <- numeric(sims)
b1_partial <- numeric(sims)
# 3 #
for(q in 1:sims){
original_corr_matrix <-  mvrnorm(N, mu, sigma)
df <-  matrix(, ncol = 4, nrow = N*time)
# 4 $
count <- 0
for(i in 1:N){
y_het <- rnorm(1,0,1)
for(j in 1:time){
count <- count + 1
if(j == 1 | j == 2 | j == 3 | j == 4 | j == 5){
df[count,1] <- j
df[count,2] <- i
df[count,3] <- original_corr_matrix[i,1]
df[count,4] <- original_corr_matrix[i,2]
}else{
df[count,1] <- j
df[count,2] <- i
df[count,3] <- autor_x * df[(count - 1), 3] + rnorm(1,0,1)
df[count,4] <- autor_y * df[(count - 1), 4] + x_cause_y * df[count - lag_amount,3] + y_het + rnorm(1,0,1) # lag amount parameter plugged in here
}
}
}
# 5 #
df <- data.frame(df)
names(df) <- c('day','id','action','affect')
df <- df %>%
mutate(lag_affect = lag(affect)) %>%
filter(day > 180)
person_mean_df <- df %>%
group_by(id) %>%
summarise(
action_person_mean = mean(action)
)
df <- left_join(df, person_mean_df)
df$action_person_center <- df$action - df$action_person_mean
# 6 #
model_wo_partial <- lme(fixed = affect ~ action_person_center,
random = ~1|id,
data = df,
control = lmeControl(opt = 'optim')
)
model_partial <- lme(fixed = affect ~ action_person_center + lag_affect,
random = ~1|id,
data = df,
control = lmeControl(opt = 'optim'))
# Without partial model results #
# p-value for b1 #
p_wo_partial[q] <- summary(model_wo_partial)$tTable[, "p-value"][2]
# standard error for b1 #
se_wo_partial[q] <- summary(model_wo_partial)$tTable[, "Std.Error"][2]
# b1 itself #
b1_wo_partial[q] <- summary(model_wo_partial)$tTable[, "Value"][2]
# With partial model results #
# p-value for b1 #
p_partial[q] <- summary(model_partial)$tTable[, "p-value"][2]
# standard error for b1 #
se_partial[q] <- summary(model_partial)$tTable[, "Std.Error"][2]
# b1 itself #
b1_partial[q] <- summary(model_partial)$tTable[, "Value"][2]
} # end the 500 sims loop here
results <- list(
'p_wo_partial' = p_wo_partial,
'se_wo_partial' = se_wo_partial,
'b1_wo_partial' = b1_wo_partial,
'p_partial' = p_partial,
'se_partial' = se_partial,
'b1_partial' = b1_partial,
'sample_size' = rep(N, sims),
'lag_amount' = rep(lag_amount, sims)
)
return(results)
}
k <- sims_function_case1(72, 2)
str(k)
final <- list(k,k,k,k,k,k,k,k,k,k,k,k,k,k,k,k,k,k,k,k,k,k,k,k,k,k,k,k,k,k,k,k,k,k,k,k)
str(final)
iy1 <- data.frame(final)
View(iy1)
iy2 <- unlist(data.frame)
iy3 <- data.frame(reduce(final))
iy2 <- unlist(final)
iy3 <- reduce(data.frame(final))
iy4 <- data.frame(reduce(final))
iy5 <- do.call(rbind(final))
iy5 <- do.call(rbind, final)
iy6 <- rbind(final)
View(iy5)
iy7 <- as.data.frame(final)
library(data.table)
iy8 <- rbindlist(final)
str(iy8)
mini <- data.frame(
'a' = c(1,2),
'b' = c(3,4),
'mini' = c('1','1')
)
mini2 <- data.frame(
'a' = c(1,2),
'b' = c(5,5),
'mini' = c('2','2')
)
mini3 <- data.frame(
'a' = c(5,7),
'b' = c(2,1),
'mini' = c('3','3')
)
bind_rows(list(
mini,
mini2,
mini3
))
bind_rows(mini, mini2, mini3)
bind_rows(c(mini, mini2, mini3))
sims_function_case1 <- function(N, lag_amount){
# 1 #
N <- N
lag_amount <- lag_amount
autor_x <- 0.05
autor_y <- 0.05
autor_z <- 0.05
x_cause_y <- 0.15
y_cause_x <- 0.15
z_cause <- 0.15
time <- 200
# 2 #
sims <- 500
p_wo_partial <- numeric(sims)
se_wo_partial <- numeric(sims)
b1_wo_partial <- numeric(sims)
p_partial <- numeric(sims)
se_partial <- numeric(sims)
b1_partial <- numeric(sims)
# 3 #
for(q in 1:sims){
id_store <- numeric(N*time)
time_store <- numeric(N*time)
x_store <- numeric(N*time)
y_store <- numeric(N*time)
# 4 #
count <- 0
for(i in 1:N){
y_het <- rnorm(1,0,1)
for(j in 1:time){
count <- count + 1
if(j == 1 | j == 2 | j == 3 | j == 4 | j == 5){
time_store[count] <- j
id_store[count] <- i
x_store[count] <- rnorm(1,0,1)
y_store[count] <- rnorm(1,0,1)
}else{
time_store[count] <- j
id_store[count] <- i
x_store[count] <- autor_x * x_store[count - 1] + rnorm(1,0,1)
y_store[count] <- autor_y * y_store[count - 1] + x_cause_y * x_store[count - lag_amount] + y_het + rnorm(1,0,1) # lag amount parameter plugged in here
}
}
}
# 5 #
df <- data.frame(
'day' = c(time_store),
'id' = c(id_store),
'action' = c(x_store),
'affect' = c(y_store)
)
df <- df %>%
mutate(lag_affect = lag(affect)) %>%
filter(day > 180)
person_mean_df <- df %>%
group_by(id) %>%
summarise(
action_person_mean = mean(action)
)
df <- left_join(df, person_mean_df)
df$action_person_center <- df$action - df$action_person_mean
# 6 #
model_wo_partial <- lme(fixed = affect ~ action_person_center,
random = ~1|id,
data = df,
control = lmeControl(opt = 'optim')
)
model_partial <- lme(fixed = affect ~ action_person_center + lag_affect,
random = ~1|id,
data = df,
control = lmeControl(opt = 'optim'))
# Without partial model results #
# p-value for b1 #
p_wo_partial[q] <- summary(model_wo_partial)$tTable[, "p-value"][2]
# standard error for b1 #
se_wo_partial[q] <- summary(model_wo_partial)$tTable[, "Std.Error"][2]
# b1 itself #
b1_wo_partial[q] <- summary(model_wo_partial)$tTable[, "Value"][2]
# With partial model results #
# p-value for b1 #
p_partial[q] <- summary(model_partial)$tTable[, "p-value"][2]
# standard error for b1 #
se_partial[q] <- summary(model_partial)$tTable[, "Std.Error"][2]
# b1 itself #
b1_partial[q] <- summary(model_partial)$tTable[, "Value"][2]
} # end the 500 sims loop here
results <- list(
'p_wo_partial' = p_wo_partial,
'se_wo_partial' = se_wo_partial,
'b1_wo_partial' = b1_wo_partial,
'p_partial' = p_partial,
'se_partial' = se_partial,
'b1_partial' = b1_partial,
'sample_size' = rep(N, sims),
'lag_amount' = rep(lag_amount, sims),
'case' = rep('case1', sims)
)
return(results)
}
# Function for case 1. Please read the simulation walk-through for an explanation of how this works.
library(tidyverse)
library(nlme)
library(MASS)
sims_function_case1 <- function(N, lag_amount){
# 1 #
N <- N
lag_amount <- lag_amount
autor_x <- 0.05
autor_y <- 0.05
autor_z <- 0.05
x_cause_y <- 0.15
y_cause_x <- 0.15
z_cause <- 0.15
time <- 200
# 2 #
sims <- 500
p_wo_partial <- numeric(sims)
se_wo_partial <- numeric(sims)
b1_wo_partial <- numeric(sims)
p_partial <- numeric(sims)
se_partial <- numeric(sims)
b1_partial <- numeric(sims)
# 3 #
for(q in 1:sims){
id_store <- numeric(N*time)
time_store <- numeric(N*time)
x_store <- numeric(N*time)
y_store <- numeric(N*time)
# 4 #
count <- 0
for(i in 1:N){
y_het <- rnorm(1,0,1)
for(j in 1:time){
count <- count + 1
if(j == 1 | j == 2 | j == 3 | j == 4 | j == 5){
time_store[count] <- j
id_store[count] <- i
x_store[count] <- rnorm(1,0,1)
y_store[count] <- rnorm(1,0,1)
}else{
time_store[count] <- j
id_store[count] <- i
x_store[count] <- autor_x * x_store[count - 1] + rnorm(1,0,1)
y_store[count] <- autor_y * y_store[count - 1] + x_cause_y * x_store[count - lag_amount] + y_het + rnorm(1,0,1) # lag amount parameter plugged in here
}
}
}
# 5 #
df <- data.frame(
'day' = c(time_store),
'id' = c(id_store),
'action' = c(x_store),
'affect' = c(y_store)
)
df <- df %>%
mutate(lag_affect = lag(affect)) %>%
filter(day > 180)
person_mean_df <- df %>%
group_by(id) %>%
summarise(
action_person_mean = mean(action)
)
df <- left_join(df, person_mean_df)
df$action_person_center <- df$action - df$action_person_mean
# 6 #
model_wo_partial <- lme(fixed = affect ~ action_person_center,
random = ~1|id,
data = df,
control = lmeControl(opt = 'optim')
)
model_partial <- lme(fixed = affect ~ action_person_center + lag_affect,
random = ~1|id,
data = df,
control = lmeControl(opt = 'optim'))
# Without partial model results #
# p-value for b1 #
p_wo_partial[q] <- summary(model_wo_partial)$tTable[, "p-value"][2]
# standard error for b1 #
se_wo_partial[q] <- summary(model_wo_partial)$tTable[, "Std.Error"][2]
# b1 itself #
b1_wo_partial[q] <- summary(model_wo_partial)$tTable[, "Value"][2]
# With partial model results #
# p-value for b1 #
p_partial[q] <- summary(model_partial)$tTable[, "p-value"][2]
# standard error for b1 #
se_partial[q] <- summary(model_partial)$tTable[, "Std.Error"][2]
# b1 itself #
b1_partial[q] <- summary(model_partial)$tTable[, "Value"][2]
} # end the 500 sims loop here
results <- list(
'p_wo_partial' = p_wo_partial,
'se_wo_partial' = se_wo_partial,
'b1_wo_partial' = b1_wo_partial,
'p_partial' = p_partial,
'se_partial' = se_partial,
'b1_partial' = b1_partial,
'sample_size' = rep(N, sims),
'lag_amount' = rep(lag_amount, sims),
'case' = rep('case1', sims)
)
return(results)
}
okie <- sims_function_case1(550, 2)
